import java.nio.charset.StandardCharsets

plugins {
    // IDE
    id 'idea'

    // Language
    id 'java'
    id 'java-library'

    // Core frameworks
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'

    // Publishing
    id 'com.vanniktech.maven.publish' version '0.29.0'

    // Utility
    id 'jacoco'
    id 'org.sonarqube' version '5.1.0.4882'
    id 'com.diffplug.spotless' version '6.25.0'
}

// Project properties
group = "$GROUP"
version = "$VERSION_NAME"
description = "$POM_DESCRIPTION"

// Source code properties
java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
    compileJava.options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.3'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-actuator'

    implementation 'io.micrometer:micrometer-core'

    implementation 'com.github.ben-manes.caffeine:caffeine'
    implementation 'io.github.resilience4j:resilience4j-circuitbreaker'

    // For exception handling utilities
    // See https://github.com/SuppieRK/java-throwable-utils
    implementation 'io.github.suppierk:java-throwable-utils:2.0.0'

    compileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.awaitility:awaitility'

    testImplementation 'org.testcontainers:junit-jupiter'
}

test {
    useJUnitPlatform()
}

// Enable Spotless code formatting rules
spotless {
    java {
        googleJavaFormat()
    }

    lineEndings = 'UNIX'
}

// Swap build tasks to build library only
bootJar {
    enabled = false
}

jar {
    enabled = true
    archiveClassifier.set('')
}

task sourceJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives javadocJar
    archives sourceJar
}

// Configure several tasks additionally for Gradle
tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = StandardCharsets.UTF_8.name()
    dependsOn(spotlessJavaCheck)
}

tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = StandardCharsets.UTF_8.name()
    dependsOn(spotlessJavaCheck)
}

test {
    // Report is always generated after tests run
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    // Tests are required to run before generating the report
    dependsOn test

    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
}

sonar {
    properties {
        property "sonar.projectKey", "SuppieRK_spring-boot-multilevel-cache-starter"
        property "sonar.organization", "suppierk"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
