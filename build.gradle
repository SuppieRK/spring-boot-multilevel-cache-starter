import java.nio.charset.StandardCharsets

plugins {
	// IDE
	id 'idea'

	// Language
	id 'java'
	id 'java-library'

	// Core frameworks
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'

	// Publishing
	id 'com.vanniktech.maven.publish' version '0.33.0'

	// Utility
	id 'jacoco'
	id 'org.sonarqube' version '6.2.0.5505'
	id 'com.diffplug.spotless' version '7.1.0'
}

// Project properties
group = "$GROUP"
version = "$VERSION_NAME"
description = "$POM_DESCRIPTION"

// Source code properties
java {
	def version = JavaVersion.VERSION_17.toString()

	sourceCompatibility = version
	targetCompatibility = version

	toolchain {
		languageVersion = JavaLanguageVersion.of(version)
	}
}

repositories {
	mavenCentral()
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencyManagement {
	imports {
		// https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies
		mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2025.0.0'
	}
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-cache') {
		exclude group: 'ch.qos.logback', module: 'logback-core'
		exclude group: 'ch.qos.logback', module: 'logback-classic'
	}
	implementation('org.springframework.boot:spring-boot-starter-data-redis') {
		exclude group: 'ch.qos.logback', module: 'logback-core'
		exclude group: 'ch.qos.logback', module: 'logback-classic'
	}
	implementation('org.springframework.boot:spring-boot-actuator') {
		exclude group: 'ch.qos.logback', module: 'logback-core'
		exclude group: 'ch.qos.logback', module: 'logback-classic'
	}

	// Vulnerability found:
	// https://ossindex.sonatype.org/vulnerability/CVE-2024-12801?component-type=maven&component-name=ch.qos.logback%2Flogback-core&utm_source=ossindex-client&utm_medium=integration&utm_content=1.7.0
	// https://ossindex.sonatype.org/vulnerability/CVE-2024-12798?component-type=maven&component-name=ch.qos.logback%2Flogback-core&utm_source=ossindex-client&utm_medium=integration&utm_content=1.7.0
	// https://mvnrepository.com/artifact/ch.qos.logback/logback-core
	implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.5.18'
	implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.18'

	implementation 'io.micrometer:micrometer-core'

	implementation 'com.github.ben-manes.caffeine:caffeine'
	implementation 'io.github.resilience4j:resilience4j-circuitbreaker'

	// For exception handling utilities
	// https://mvnrepository.com/artifact/io.github.suppierk/java-throwable-utils
	implementation 'io.github.suppierk:java-throwable-utils:2.0.0'

	compileOnly 'org.projectlombok:lombok'

	annotationProcessor('org.springframework.boot:spring-boot-configuration-processor') {
		exclude group: 'ch.qos.logback', module: 'logback-core'
		exclude group: 'ch.qos.logback', module: 'logback-classic'
	}
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'ch.qos.logback', module: 'logback-core'
		exclude group: 'ch.qos.logback', module: 'logback-classic'
	}
	testImplementation 'org.awaitility:awaitility'

	testImplementation('org.testcontainers:junit-jupiter') {
		exclude group: 'org.apache.commons', module: 'commons-compress'
	}
	// https://mvnrepository.com/artifact/org.apache.commons/commons-compress
	testImplementation 'org.apache.commons:commons-compress:1.27.1'
}

test {
	useJUnitPlatform()
}

// Enable Spotless code formatting rules
spotless {
	java {
		target '**/src/*/java/**/*.java'

		// Aligns with Intellij IDEA default settings
		toggleOffOn('@formatter:off', '@formatter:on')

		googleJavaFormat()
	}

	groovyGradle {
		target '**/*.gradle'

		greclipse()
	}
}

// Swap build tasks to build library only
bootJar {
	enabled = false
}

jar {
	enabled = true
	archiveClassifier.set('')
}

tasks.register('sourceJar', Jar){
	dependsOn classes
	archiveClassifier.set('sources')
	from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar){
	dependsOn javadoc
	archiveClassifier.set('javadoc')
	from javadoc.destinationDir
}

artifacts {
	archives jar
	archives javadocJar
	archives sourceJar
}

// Configure several tasks additionally for Gradle
tasks.withType(Copy).configureEach {
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = StandardCharsets.UTF_8.name()
	dependsOn(spotlessJavaCheck)
}

test {
	// Report is always generated after tests run
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	// Tests are required to run before generating the report
	dependsOn test

	reports {
		html.required = true
		xml.required = true
		csv.required = false
	}
}

sonar {
	properties {
		property "sonar.projectKey", "SuppieRK_spring-boot-multilevel-cache-starter"
		property "sonar.organization", "suppierk"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}
